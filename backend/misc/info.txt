Name: Manufacturer.sol

1. addProduct - adds products to the chain - id[str], name[str], price[uint], product_description[str]
2. getProductInfo -  a mapping that stores the product information based on the product ID, which the function can query to retrieve the information.
  - id[str] as input and returns the product information (name, price, product_description), currentOwner[address].
3. transferOwnership - transfer the ownership of a product from one party to another.
  - productID[str],newOwnerType: “retailer”,"distributor”,”Consumer”[str],address: newOwner[address]
4. getProductTimeline - This function is used to retrieve the entire timeline of a product. This timeline includes all the events that have been added to the product's history, along with their corresponding timestamps and details.

create the contract in such a way that the products can only be transferred by its owner (who added the product at the first place)

Name: Consumer.sol

1. getProductInfo - getProductInfo -  a mapping that stores the product information based on the product ID, which the function can query to retrieve the information.
  - id[str] as input and returns the product information (name, price, product_description), currentOwner[address].
2. 


I want you to act as a web3 full stack developer. 

Consider we are building a supplychain dapp for anti-counterfeiting, we have four entites present Manufacturer, Retailer, distributor and Consumer
in the manufacturer smart contract, we have a function called addProduct which adds product to the chain. but we 
have a drawback, manufacturer wants to add multiple products to the chain but he have to add it one by one. which is impractical,
to solve this we have to create a script that takes products.csv as input and adds multiple products to the chain.

Here's an example of products.csv: ("id", "name", "price", "batchId", "description")

"45tt1","Product A","$4.72","1","An addidas shoe"
"2","Product B","$4.65","1","An nike"
"3-ere3","Product C","$7.32","1","products description for addidas"
"id-776","Product D","$3.21","1","some_text here"
"2342134","Product E","$8.45","1","this is description"

Here's the smart contract:


